generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../../db/admin.db"
}

model User {
  id                     Int                      @id @default(autoincrement())
  codeName               String                   @unique
  basic                  BasicComponent?
  CareerGroup            CareerGroup[]
  note                   NotesComponent[]
  UserSkillGroupRelation UserSkillGroupRelation[]
  UserSkillKindRelation  UserSkillKindRelation[]
}

model BasicComponent {
  id             Int             @id @default(autoincrement())
  nickname       String
  birthday       String
  job            String
  belongTo       String
  userId         Int             @unique
  user           User            @relation(fields: [userId], references: [id])
  likes          Like[]
  outputs        Output[]
  qualifications Qualification[]
}

model Like {
  id      Int    @id @default(autoincrement())
  name    String
  basicId Int
  basic   BasicComponent  @relation(fields: [basicId], references: [id])
}

model Output {
  id      Int     @id @default(autoincrement())
  name    String
  url     String?
  icon    String?
  basicId Int
  basic   BasicComponent   @relation(fields: [basicId], references: [id])
}

model Qualification {
  id      Int     @id @default(autoincrement())
  name    String
  org     String?
  url     String?
  date    String?
  note    String?
  basicId Int
  basic   BasicComponent   @relation(fields: [basicId], references: [id])
}

model NotesComponent {
  id             Int        @id @default(autoincrement())
  label          String
  showNow        Boolean    @default(false)
  isMultipleLine Boolean    @default(false)
  memo           String?
  order          Int        @unique
  userId         Int
  user           User       @relation(fields: [userId], references: [id])
  items          NoteItem[]
}

model NoteItem {
  id     Int    @id @default(autoincrement())
  text   String
  order  Int
  noteId Int
  note   NotesComponent   @relation(fields: [noteId], references: [id])
}

model Career {
  id                         Int                          @id @default(autoincrement())
  title                      String
  explanation                String?
  fromYYYYMM                 Int
  toYYYYMM                   Int?
  task                       String?
  careerGroupId              Int
  CareerGroup                CareerGroup                  @relation(fields: [careerGroupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  CareerSkillVersionRelation CareerSkillVersionRelation[]
}

model CareerGroup {
  id     Int      @id @default(autoincrement())
  label  String?
  userId Int
  User   User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Career Career[]
}

model CareerSkillVersionRelation {
  careerId       Int
  skillVersionId Int
  Career         Career       @relation(fields: [careerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  SkillVersion   SkillVersion @relation(fields: [skillVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([careerId, skillVersionId])
}

model Skill {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique(map: "Skill_name_uindex")
  SkillDescription   SkillDescription?
  SkillGroupRelation SkillGroupRelation[]
  SkillKindRelation  SkillKindRelation[]
  SkillVersion       SkillVersion[]
}

model SkillDescription {
  id          Int     @id @default(autoincrement())
  skillId     Int     @unique(map: "SkillDescription_skillId_uindex")
  description String?
  Skill       Skill   @relation(fields: [skillId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model SkillGroup {
  id                     Int                      @id @default(autoincrement())
  label                  String                   @unique(map: "SkillGroup_label_uindex")
  SkillGroupRelation     SkillGroupRelation[]
  UserSkillGroupRelation UserSkillGroupRelation[]
}

model SkillGroupRelation {
  skillId      Int
  skillGroupId Int
  SkillGroup   SkillGroup @relation(fields: [skillGroupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Skill        Skill      @relation(fields: [skillId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([skillId, skillGroupId])
}

model SkillKind {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique(map: "SkillKind_name_uindex")
  SkillKindRelation     SkillKindRelation[]
  UserSkillKindRelation UserSkillKindRelation[]
}

model SkillKindRelation {
  skillId     Int
  skillKindId Int
  Skill       Skill     @relation(fields: [skillId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  SkillKind   SkillKind @relation(fields: [skillKindId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([skillId, skillKindId])
}

model SkillVersion {
  id                         Int                          @id @default(autoincrement())
  version                    String
  skillId                    Int?
  Skill                      Skill?                       @relation(fields: [skillId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  CareerSkillVersionRelation CareerSkillVersionRelation[]
}

model UserSkillGroupRelation {
  userId       Int
  skillGroupId Int
  order        Int        @unique(map: "UserSkillGroupRelation_order_uindex")
  SkillGroup   SkillGroup @relation(fields: [skillGroupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User         User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, skillGroupId])
}

model UserSkillKindRelation {
  userId      Int
  skillKindId Int
  order       Int       @unique(map: "UserSkillKindRelation_order_uindex")
  SkillKind   SkillKind @relation(fields: [skillKindId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User        User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, skillKindId])
}
